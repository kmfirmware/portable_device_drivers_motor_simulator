
GccBoardProject3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800200  00800200  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000135d  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0e  00000000  00000000  000016a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f8d  00000000  00000000  000025af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  0000353c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001354d  00000000  00000000  0000366c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000314  00000000  00000000  00016bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00016ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000895  00000000  00000000  00016f4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	6a c0       	rjmp	.+212    	; 0x10a <__vector_13>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a6 30       	cpi	r26, 0x06	; 6
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	53 d0       	rcall	.+166    	; 0x1ac <main>
 106:	5d c0       	rjmp	.+186    	; 0x1c2 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_13>:
# define TC_TIMEOUT_COMP_vect TIMER2_COMPA_vect
#endif

//! \brief Interrupt handler for TC compare
ISR(TC_TIMEOUT_COMP_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	2f 93       	push	r18
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
	uint8_t i;

	for (i = 0; i < CONFIG_TC_TIMEOUT_COUNT; i++) {
		if (!(tc_timeout_active & (1 << i)))
 122:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <tc_timeout_active>
 126:	20 ff       	sbrs	r18, 0
 128:	1c c0       	rjmp	.+56     	; 0x162 <__vector_13+0x58>
			continue;
		tc_timeout_array[i].count--;
 12a:	e2 e0       	ldi	r30, 0x02	; 2
 12c:	f2 e0       	ldi	r31, 0x02	; 2
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	91 83       	std	Z+1, r25	; 0x01
 136:	80 83       	st	Z, r24
		if (tc_timeout_array[i].count)
 138:	89 2b       	or	r24, r25
 13a:	99 f4       	brne	.+38     	; 0x162 <__vector_13+0x58>
			continue;
		tc_timeout_expired |= 1 << i;
 13c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
		if (tc_timeout_array[i].period)
 146:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <tc_timeout_array+0x2>
 14a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <tc_timeout_array+0x3>
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	29 f0       	breq	.+10     	; 0x15c <__vector_13+0x52>
			tc_timeout_array[i].count = tc_timeout_array[i].period;
 152:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <tc_timeout_array+0x1>
 156:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <tc_timeout_array>
 15a:	03 c0       	rjmp	.+6      	; 0x162 <__vector_13+0x58>
		else
			tc_timeout_active &= ~(1 << i);
 15c:	2e 7f       	andi	r18, 0xFE	; 254
 15e:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <tc_timeout_active>
	}
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0b be       	out	0x3b, r0	; 59
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <tc_timeout_init>:
/** @} */

void tc_timeout_init(bool enableInt)
{
	// Set up clock source according to configuration
	ASSR = TC_TIMEOUT_ASSR_MASK;
 17a:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7000b6>

	// Set compare to value for desired tick rate
	TC_TIMEOUT_OCR = TC_TIMEOUT_COMP;
 17e:	93 ef       	ldi	r25, 0xF3	; 243
 180:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
	// Configure Timer/Counter to CTC mode, and set desired prescaler
#ifdef TC_TIMEOUT_TCCRB // Only newer mega devices have two control register
	TC_TIMEOUT_TCCRA = 1 << WGM21;
 184:	92 e0       	ldi	r25, 0x02	; 2
 186:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TC_TIMEOUT_TCCRB = TC_TIMEOUT_PRESCALER_MASK;
 18a:	97 e0       	ldi	r25, 0x07	; 7
 18c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
#else
	TC_TIMEOUT_TCCRA = (1 << WGM21) | TC_TIMEOUT_PRESCALER_MASK;
#endif
    if (enableInt)
 190:	88 23       	and	r24, r24
 192:	19 f0       	breq	.+6      	; 0x19a <tc_timeout_init+0x20>
	{
	// Enable interrupt for compare match
	TC_TIMEOUT_TIMSK = 1 << TC_TIMEOUT_OCIE;
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
 19a:	08 95       	ret

0000019c <tc_timeout_compare_match>:
	}
}
inline bool tc_timeout_compare_match()
{
   bool set=false;
   if (TIFR2 & (1<<OCF2A))  // check if timer match flag is set
 19c:	b9 9b       	sbis	0x17, 1	; 23
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <tc_timeout_compare_match+0xa>
   {
      set = true;
      TIFR2|=(1<<OCF2A);// clear flag
 1a0:	b9 9a       	sbi	0x17, 1	; 23
inline bool tc_timeout_compare_match()
{
   bool set=false;
   if (TIFR2 & (1<<OCF2A))  // check if timer match flag is set
   {
      set = true;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	08 95       	ret
	TC_TIMEOUT_TIMSK = 1 << TC_TIMEOUT_OCIE;
	}
}
inline bool tc_timeout_compare_match()
{
   bool set=false;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
   {
      set = true;
      TIFR2|=(1<<OCF2A);// clear flag
   }
   return set;
}
 1a8:	08 95       	ret

000001aa <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 1aa:	08 95       	ret

000001ac <main>:
#include "..\services\ioport\ioport.h"
//#include "..\services\clock\sysclk.h"
#include "..\mega\drivers\timers\tc_timeout.h"

int main (void)
{
 1ac:	fe df       	rcall	.-4      	; 0x1aa <board_init>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	e4 df       	rcall	.-56     	; 0x17a <tc_timeout_init>
 1b2:	16 98       	cbi	0x02, 6	; 2
 1b4:	0e 9a       	sbi	0x01, 6	; 1
 1b6:	c0 e4       	ldi	r28, 0x40	; 64
 1b8:	f1 df       	rcall	.-30     	; 0x19c <tc_timeout_compare_match>
 1ba:	88 23       	and	r24, r24
 1bc:	e9 f3       	breq	.-6      	; 0x1b8 <main+0xc>
 1be:	c0 b9       	out	0x00, r28	; 0
 1c0:	fb cf       	rjmp	.-10     	; 0x1b8 <main+0xc>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
