
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000009e4  00000a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800206  00800206  00000a7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002536  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014bd  00000000  00000000  000031a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f51  00000000  00000000  00004663  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  000065b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00013a00  00000000  00000000  000069b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e02  00000000  00000000  0001a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0001b1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000051ab  00000000  00000000  0001b2d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	f8 c3       	rjmp	.+2032   	; 0x7f6 <__vector_1>
   6:	00 00       	nop
   8:	1a c4       	rjmp	.+2100   	; 0x83e <__vector_2>
   a:	00 00       	nop
   c:	3e c4       	rjmp	.+2172   	; 0x88a <__vector_3>
   e:	00 00       	nop
  10:	61 c4       	rjmp	.+2242   	; 0x8d4 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c2       	rjmp	.+1106   	; 0x478 <__vector_9>
  26:	00 00       	nop
  28:	7a c4       	rjmp	.+2292   	; 0x91e <__vector_10>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	8c c2       	rjmp	.+1304   	; 0x54e <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	bc c3       	rjmp	.+1912   	; 0x7be <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ee       	ldi	r30, 0xE4	; 228
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 31       	cpi	r26, 0x14	; 20
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e5 d2       	rcall	.+1482   	; 0x6ea <main>
 120:	5f c4       	rjmp	.+2238   	; 0x9e0 <_exit>

00000122 <__bad_interrupt>:
 122:	0b c2       	rjmp	.+1046   	; 0x53a <__vector_default>

00000124 <MotorStatus>:
 }
 
 Status MotorStatus()
 {
    Status result=NONE;
	DriverStatus status=GetStatus();
 124:	9d d1       	rcall	.+826    	; 0x460 <GetStatus>
	
	if (status & NOREADY)
 126:	98 2f       	mov	r25, r24
 128:	9a 70       	andi	r25, 0x0A	; 10
 12a:	e9 f4       	brne	.+58     	; 0x166 <MotorStatus+0x42>
	{
	   result=ERR;
	}
	else if (status & READY) 
 12c:	98 2f       	mov	r25, r24
 12e:	99 70       	andi	r25, 0x09	; 9
 130:	99 f0       	breq	.+38     	; 0x158 <MotorStatus+0x34>
	{
	   if (status & FORWARD && status & FAST)
 132:	98 2f       	mov	r25, r24
 134:	96 70       	andi	r25, 0x06	; 6
 136:	31 f0       	breq	.+12     	; 0x144 <MotorStatus+0x20>
 138:	98 2f       	mov	r25, r24
 13a:	93 70       	andi	r25, 0x03	; 3
 13c:	b1 f4       	brne	.+44     	; 0x16a <MotorStatus+0x46>
	   {
	      result=FORWARD_FAST;
	   }
	   else if (status & FORWARD && status & SLOW)
 13e:	82 fd       	sbrc	r24, 2
 140:	16 c0       	rjmp	.+44     	; 0x16e <MotorStatus+0x4a>
 142:	21 c0       	rjmp	.+66     	; 0x186 <MotorStatus+0x62>
	   {
	      result=FORWARD_SLOW;
	   }
	   else if (status & REVERSE && status & FAST )
 144:	98 2f       	mov	r25, r24
 146:	97 70       	andi	r25, 0x07	; 7
 148:	a1 f0       	breq	.+40     	; 0x172 <MotorStatus+0x4e>
 14a:	98 2f       	mov	r25, r24
 14c:	93 70       	andi	r25, 0x03	; 3
 14e:	99 f4       	brne	.+38     	; 0x176 <MotorStatus+0x52>
	   {
	      result=REVERSE_FAST;
	   }
	   else if (status & REVERSE && status & SLOW)
 150:	82 ff       	sbrs	r24, 2
 152:	13 c0       	rjmp	.+38     	; 0x17a <MotorStatus+0x56>
	   {
	      result=REVERSE_SLOW;
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	08 95       	ret
	   }
	 }
	 else if (status & EQUAL || status & STONE)
 158:	8d 70       	andi	r24, 0x0D	; 13
	 {
	    result=STOP;
	 }
	 else if (GetEmStatus() == EMERGENCY)
 15a:	89 f4       	brne	.+34     	; 0x17e <MotorStatus+0x5a>
 15c:	8a d1       	rcall	.+788    	; 0x472 <GetEmStatus>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	81 f4       	brne	.+32     	; 0x182 <MotorStatus+0x5e>
	 {
	    result=EMERG;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
    Status result=NONE;
	DriverStatus status=GetStatus();
	
	if (status & NOREADY)
	{
	   result=ERR;
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	08 95       	ret
	}
	else if (status & READY) 
	{
	   if (status & FORWARD && status & FAST)
	   {
	      result=FORWARD_FAST;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	08 95       	ret
	   }
	   else if (status & FORWARD && status & SLOW)
	   {
	      result=FORWARD_SLOW;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	08 95       	ret
	 return MotorStatus();
 }
 
 Status MotorStatus()
 {
    Status result=NONE;
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	08 95       	ret
	   {
	      result=FORWARD_SLOW;
	   }
	   else if (status & REVERSE && status & FAST )
	   {
	      result=REVERSE_FAST;
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	08 95       	ret
	 return MotorStatus();
 }
 
 Status MotorStatus()
 {
    Status result=NONE;
 17a:	87 e0       	ldi	r24, 0x07	; 7
 17c:	08 95       	ret
	      result=REVERSE_SLOW;
	   }
	 }
	 else if (status & EQUAL || status & STONE)
	 {
	    result=STOP;
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	08 95       	ret
	 return MotorStatus();
 }
 
 Status MotorStatus()
 {
    Status result=NONE;
 182:	87 e0       	ldi	r24, 0x07	; 7
 184:	08 95       	ret
	   }
	   else if (status & FORWARD && status & SLOW)
	   {
	      result=FORWARD_SLOW;
	   }
	   else if (status & REVERSE && status & FAST )
 186:	98 2f       	mov	r25, r24
 188:	97 70       	andi	r25, 0x07	; 7
 18a:	11 f7       	brne	.-60     	; 0x150 <MotorStatus+0x2c>
	 return MotorStatus();
 }
 
 Status MotorStatus()
 {
    Status result=NONE;
 18c:	87 e0       	ldi	r24, 0x07	; 7
	 else if (GetEmStatus() == EMERGENCY)
	 {
	    result=EMERG;
	 }
	 return result;
 18e:	08 95       	ret

00000190 <DrvrInit>:
 #include <driver.h>
 #include "..\services\ioport\ioport.h"


 Status DrvrInit(LEDConfig config, CallbType callback)
 {
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
 198:	8b 01       	movw	r16, r22
    if (GetStatus() & NOINIT)
 19a:	62 d1       	rcall	.+708    	; 0x460 <GetStatus>
 19c:	8b 70       	andi	r24, 0x0B	; 11
 19e:	59 f0       	breq	.+22     	; 0x1b6 <DrvrInit+0x26>
	{
       if (config == LEDConfigA)
 1a0:	c1 11       	cpse	r28, r1
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <DrvrInit+0x1c>
	   {
	      MotorDriverInit(LEDConfigA,callback);
 1a4:	b8 01       	movw	r22, r16
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	c4 d0       	rcall	.+392    	; 0x332 <MotorDriverInit>
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <DrvrInit+0x26>
	   }
	   else if (config == LEDConfigB)
 1ac:	c1 30       	cpi	r28, 0x01	; 1
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <DrvrInit+0x26>
	   {
	      MotorDriverInit(LEDConfigB, callback);
 1b0:	b8 01       	movw	r22, r16
 1b2:	81 e0       	ldi	r24, 0x01	; 1
	   }
	}

	return MotorStatus();
 1b4:	be d0       	rcall	.+380    	; 0x332 <MotorDriverInit>
 1b6:	b6 df       	rcall	.-148    	; 0x124 <MotorStatus>
 }
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret

000001c0 <MotorStop>:
	 return MotorStatus();
 }

 Status MotorStop()
 {
     DriverStatus status=GetStatus();
 1c0:	4f d1       	rcall	.+670    	; 0x460 <GetStatus>
	 if (!(status&NOREADY) && !(status&NOINIT))
 1c2:	8b 70       	andi	r24, 0x0B	; 11
	 {
	    MotorStop();
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <MotorStop+0x8>
	 }
	
	 return MotorStatus();
 1c6:	fc df       	rcall	.-8      	; 0x1c0 <MotorStop>
 1c8:	ad cf       	rjmp	.-166    	; 0x124 <MotorStatus>
 }
 1ca:	08 95       	ret

000001cc <MotorForward>:

	return MotorStatus();
 }
 
 Status MotorForward(Speed speed)
 {
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
    DriverStatus status=GetStatus();
 1d0:	47 d1       	rcall	.+654    	; 0x460 <GetStatus>
    if ((status&READY) == READY && (status&REVERSE) == REVERSE)
 1d2:	98 2f       	mov	r25, r24
 1d4:	99 70       	andi	r25, 0x09	; 9
 1d6:	99 30       	cpi	r25, 0x09	; 9
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <MotorForward+0x1c>
 1da:	87 70       	andi	r24, 0x07	; 7
 1dc:	87 30       	cpi	r24, 0x07	; 7
	{
	    // stop motor before going forward
		MotorStop();
 1de:	21 f4       	brne	.+8      	; 0x1e8 <MotorForward+0x1c>
 1e0:	ef df       	rcall	.-34     	; 0x1c0 <MotorStop>
		MotorDrive(speed,FORWARD);
 1e2:	66 e0       	ldi	r22, 0x06	; 6
 1e4:	8c 2f       	mov	r24, r28
	}
	
	return MotorStatus();
 1e6:	65 d0       	rcall	.+202    	; 0x2b2 <MotorDrive>
 1e8:	9d df       	rcall	.-198    	; 0x124 <MotorStatus>
 }
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <MotorReverse>:

 Status MotorReverse(Speed speed)
 {
 1ee:	cf 93       	push	r28
 1f0:	c8 2f       	mov	r28, r24
	 DriverStatus status=GetStatus();
 1f2:	36 d1       	rcall	.+620    	; 0x460 <GetStatus>
	 if ((status&READY) == READY && (status&FORWARD) == FORWARD)
 1f4:	98 2f       	mov	r25, r24
 1f6:	99 70       	andi	r25, 0x09	; 9
 1f8:	99 30       	cpi	r25, 0x09	; 9
 1fa:	39 f4       	brne	.+14     	; 0x20a <MotorReverse+0x1c>
 1fc:	86 70       	andi	r24, 0x06	; 6
 1fe:	86 30       	cpi	r24, 0x06	; 6
	 {
		 // stop motor before going forward
		 MotorStop();
 200:	21 f4       	brne	.+8      	; 0x20a <MotorReverse+0x1c>
 202:	de df       	rcall	.-68     	; 0x1c0 <MotorStop>
		 MotorDrive(speed,REVERSE);
 204:	67 e0       	ldi	r22, 0x07	; 7
 206:	8c 2f       	mov	r24, r28
	 }
	
	 
	 return MotorStatus();
 208:	54 d0       	rcall	.+168    	; 0x2b2 <MotorDrive>
 20a:	8c df       	rcall	.-232    	; 0x124 <MotorStatus>
 }
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	1f 92       	push	r1
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
 220:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
 224:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	69 f0       	breq	.+26     	; 0x246 <sysclk_init+0x36>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 22c:	8f b7       	in	r24, 0x3f	; 63
 22e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 230:	f8 94       	cli
	return flags;
 232:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
 234:	5f 93       	push	r21
 236:	50 e8       	ldi	r21, 0x80	; 128
 238:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 23c:	53 e0       	ldi	r21, 0x03	; 3
 23e:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 242:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 244:	8f bf       	out	0x3f, r24	; 63
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
 246:	0f 90       	pop	r0
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <MotorRate>:
 }

 // callback function for timer code
 void MotorRate()
 {
    if (curDir == FORWARD)
 24e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <curDir>
 252:	86 30       	cpi	r24, 0x06	; 6
 254:	b1 f4       	brne	.+44     	; 0x282 <MotorRate+0x34>
	{
	   ioport_tgl_group(ioport_pin_to_port_id(currConfig.config.forwardPin),1<<currConfig.config.forwardPin);
 256:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <__data_end+0x1>
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	08 2e       	mov	r0, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <MotorRate+0x18>
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <MotorRate+0x14>
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 26a:	86 95       	lsr	r24
 26c:	86 95       	lsr	r24
 26e:	86 95       	lsr	r24
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	ac 01       	movw	r20, r24
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	fa 01       	movw	r30, r20
 27a:	e8 0f       	add	r30, r24
 27c:	f9 1f       	adc	r31, r25
__always_inline static void arch_ioport_toggle_port_level(ioport_port_t port,
		ioport_port_mask_t mask)
{
	PORT_t *base = arch_ioport_port_to_base(port);

	base->PINCRL = mask;
 27e:	20 a3       	std	Z+32, r18	; 0x20
 280:	08 95       	ret
	}
	else if (curDir == REVERSE)
 282:	87 30       	cpi	r24, 0x07	; 7
 284:	a9 f4       	brne	.+42     	; 0x2b0 <MotorRate+0x62>
	{
	   ioport_tgl_group(ioport_pin_to_port_id(currConfig.config.reversePin), 1<<currConfig.config.reversePin); 
 286:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end+0x2>
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	08 2e       	mov	r0, r24
 290:	02 c0       	rjmp	.+4      	; 0x296 <MotorRate+0x48>
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <MotorRate+0x44>
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 29a:	86 95       	lsr	r24
 29c:	86 95       	lsr	r24
 29e:	86 95       	lsr	r24
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	fa 01       	movw	r30, r20
 2aa:	e8 0f       	add	r30, r24
 2ac:	f9 1f       	adc	r31, r25
__always_inline static void arch_ioport_toggle_port_level(ioport_port_t port,
		ioport_port_mask_t mask)
{
	PORT_t *base = arch_ioport_port_to_base(port);

	base->PINCRL = mask;
 2ae:	20 a3       	std	Z+32, r18	; 0x20
 2b0:	08 95       	ret

000002b2 <MotorDrive>:
	
 }
 
 //forward motor --forward led flash, reverse led stops
 void MotorDrive(Speed speed,Dir direction)
 {
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	c8 2f       	mov	r28, r24
 2b8:	d6 2f       	mov	r29, r22

	   if (speed == SLOW)
 2ba:	84 30       	cpi	r24, 0x04	; 4
 2bc:	49 f4       	brne	.+18     	; 0x2d0 <MotorDrive+0x1e>
	   {
		  tc_timer_set(TMR_TICKS(CONFIG_TC_TIMEOUT_CLOCK_SOURCE_HZ,.4),&MotorRate);
 2be:	47 e2       	ldi	r20, 0x27	; 39
 2c0:	51 e0       	ldi	r21, 0x01	; 1
 2c2:	6d e0       	ldi	r22, 0x0D	; 13
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	8a d1       	rcall	.+788    	; 0x5e0 <tc_timer_set>
		  tc_timer_start();
 2cc:	f3 d1       	rcall	.+998    	; 0x6b4 <tc_timer_start>
 2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <MotorDrive+0x32>
 2d0:	83 30       	cpi	r24, 0x03	; 3
	   }
	   else if (speed == FAST)
 2d2:	41 f4       	brne	.+16     	; 0x2e4 <MotorDrive+0x32>
 2d4:	47 e2       	ldi	r20, 0x27	; 39
	   {
	      tc_timer_set(TMR_TICKS(CONFIG_TC_TIMEOUT_CLOCK_SOURCE_HZ,.1),&MotorRate);
 2d6:	51 e0       	ldi	r21, 0x01	; 1
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	7f d1       	rcall	.+766    	; 0x5e0 <tc_timer_set>
	      tc_timer_start();
 2e2:	e8 d1       	rcall	.+976    	; 0x6b4 <tc_timer_start>
 2e4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <emStatus>
	   }
	 
	   if (emStatus != NOEMERG) //emergency bit changed
 2e8:	8f 3f       	cpi	r24, 0xFF	; 255
 2ea:	41 f0       	breq	.+16     	; 0x2fc <MotorDrive+0x4a>
 2ec:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_end+0x4>
	   {
		   currConfig.config.callback(emStatus=NOEMERG); // call callback
 2f0:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_end+0x5>
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <emStatus>
 2fa:	19 95       	eicall
 2fc:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__data_start>
	   }
	   curSpeed=speed;
 300:	d0 93 01 02 	sts	0x0201, r29	; 0x800201 <curDir>
	   curDir=direction;
 304:	df 91       	pop	r29

 }
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <StopMotor>:
 30a:	88 e0       	ldi	r24, 0x08	; 8


 void StopMotor()
 {
    curDir=EQUAL;
 30c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <curDir>
	curSpeed=STONE;
 310:	85 e0       	ldi	r24, 0x05	; 5
 312:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    tc_timer_stop();
 316:	da d1       	rcall	.+948    	; 0x6cc <tc_timer_stop>
	if (emStatus != NOEMERG) //emergency bit changed
 318:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <emStatus>
 31c:	8f 3f       	cpi	r24, 0xFF	; 255
 31e:	41 f0       	breq	.+16     	; 0x330 <StopMotor+0x26>
	{
		currConfig.config.callback(emStatus=NOEMERG); // call callback
 320:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_end+0x4>
 324:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_end+0x5>
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <emStatus>
 32e:	19 95       	eicall
 330:	08 95       	ret

00000332 <MotorDriverInit>:
 static Dir curDir=EQUAL;
 static Speed curSpeed=STONE;
  
 void MotorDriverInit(uint8_t config, CallbType callback)
 {
    cpu_irq_disable();
 332:	f8 94       	cli
    if (config == 0)
 334:	81 11       	cpse	r24, r1
 336:	12 c0       	rjmp	.+36     	; 0x35c <MotorDriverInit+0x2a>
	   LEDConfigA configA;
	   configA.LEDs=IOPORT_PORTE;
	   configA.forwardPin=PINE1;
	   configA.reversePin=PINE2;
	   configA.emergSwPin=PINB7;
	   currConfig.config=configA;
 338:	e6 e0       	ldi	r30, 0x06	; 6
 33a:	f2 e0       	ldi	r31, 0x02	; 2
 33c:	84 e0       	ldi	r24, 0x04	; 4
 33e:	80 83       	st	Z, r24
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	81 83       	std	Z+1, r24	; 0x01
 344:	92 e0       	ldi	r25, 0x02	; 2
 346:	92 83       	std	Z+2, r25	; 0x02
 348:	97 e0       	ldi	r25, 0x07	; 7
 34a:	93 83       	std	Z+3, r25	; 0x03
 34c:	15 82       	std	Z+5, r1	; 0x05
 34e:	14 82       	std	Z+4, r1	; 0x04
	   configA.callback=callback;
	   PCMSK0=(1<<currConfig.config.emergSwPin); //set which pin interrupts is enabled
 350:	90 e8       	ldi	r25, 0x80	; 128
 352:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x70006b>
	   PCICR=(1<<PCINTMASK); //enable PCINT0
 356:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
 35a:	14 c0       	rjmp	.+40     	; 0x384 <MotorDriverInit+0x52>
	}
	else if (config == 1)
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	09 f0       	breq	.+2      	; 0x362 <MotorDriverInit+0x30>
 360:	7e c0       	rjmp	.+252    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	   LEDConfigB configB;
	   configB.LEDs=IOPORT_PORTH;
	   configB.forwardPin=PINH5;
	   configB.reversePin=PINH6;
	   configB.emergSwPin=PINB6;
	   currConfig.configCopy=configB;
 362:	e6 e0       	ldi	r30, 0x06	; 6
 364:	f2 e0       	ldi	r31, 0x02	; 2
 366:	8a e4       	ldi	r24, 0x4A	; 74
 368:	80 83       	st	Z, r24
 36a:	85 e0       	ldi	r24, 0x05	; 5
 36c:	81 83       	std	Z+1, r24	; 0x01
 36e:	86 e0       	ldi	r24, 0x06	; 6
 370:	82 83       	std	Z+2, r24	; 0x02
 372:	83 83       	std	Z+3, r24	; 0x03
 374:	15 82       	std	Z+5, r1	; 0x05
 376:	14 82       	std	Z+4, r1	; 0x04
	   configB.callback=callback;
	   PCMSK0=(1<<currConfig.config.emergSwPin); //set which pin interrupt is enabled
 378:	80 e4       	ldi	r24, 0x40	; 64
 37a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x70006b>
	   PCICR=(1<<PCINTMASK); //enable PCINT0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
	   return;
	}
	ioport_init();
	// configure Leds
    ioport_configure_group(currConfig.config.LEDs,
	                         (pin_mask_t)((1<<currConfig.config.forwardPin)|(1<<currConfig.config.reversePin)),IOPORT_DIR_OUTPUT);
 384:	e6 e0       	ldi	r30, 0x06	; 6
 386:	f2 e0       	ldi	r31, 0x02	; 2
	{
	   return;
	}
	ioport_init();
	// configure Leds
    ioport_configure_group(currConfig.config.LEDs,
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	9c 01       	movw	r18, r24
 38e:	01 80       	ldd	r0, Z+1	; 0x01
 390:	02 c0       	rjmp	.+4      	; 0x396 <MotorDriverInit+0x64>
 392:	22 0f       	add	r18, r18
 394:	33 1f       	adc	r19, r19
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <MotorDriverInit+0x60>
 39a:	02 80       	ldd	r0, Z+2	; 0x02
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <MotorDriverInit+0x70>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <MotorDriverInit+0x6c>
 3a6:	82 2b       	or	r24, r18
 3a8:	e0 81       	ld	r30, Z
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
#ifdef IOPORT_BASE_ADDRESS_H	
	if (port >= IOPORT_PORTH) {
 3aa:	ea 34       	cpi	r30, 0x4A	; 74
 3ac:	58 f0       	brcs	.+22     	; 0x3c4 <MotorDriverInit+0x92>
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
 3ae:	ae 2f       	mov	r26, r30
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	aa 54       	subi	r26, 0x4A	; 74
 3b4:	b1 09       	sbc	r27, r1
 3b6:	9d 01       	movw	r18, r26
 3b8:	22 0f       	add	r18, r18
 3ba:	33 1f       	adc	r19, r19
 3bc:	a2 0f       	add	r26, r18
 3be:	b3 1f       	adc	r27, r19
 3c0:	b3 95       	inc	r27
 3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <MotorDriverInit+0xa2>
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 3c4:	ae 2f       	mov	r26, r30
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	9d 01       	movw	r18, r26
 3ca:	22 0f       	add	r18, r18
 3cc:	33 1f       	adc	r19, r19
 3ce:	a2 0f       	add	r26, r18
 3d0:	b3 1f       	adc	r27, r19
 3d2:	90 96       	adiw	r26, 0x20	; 32
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 3d4:	98 2f       	mov	r25, r24
 3d6:	90 95       	com	r25
 3d8:	12 96       	adiw	r26, 0x02	; 2
 3da:	2c 91       	ld	r18, X
 3dc:	12 97       	sbiw	r26, 0x02	; 2
 3de:	92 23       	and	r25, r18
 3e0:	12 96       	adiw	r26, 0x02	; 2
 3e2:	9c 93       	st	X, r25
 3e4:	12 97       	sbiw	r26, 0x02	; 2
		}

		*((uint8_t *)port + 1) |= pin_mask;
 3e6:	11 96       	adiw	r26, 0x01	; 1
 3e8:	9c 91       	ld	r25, X
 3ea:	11 97       	sbiw	r26, 0x01	; 1
 3ec:	89 2b       	or	r24, r25
 3ee:	11 96       	adiw	r26, 0x01	; 1
 3f0:	8c 93       	st	X, r24
	                         (pin_mask_t)((1<<currConfig.config.forwardPin)|(1<<currConfig.config.reversePin)),IOPORT_DIR_OUTPUT);
	
	// configure emergency switch
	ioport_configure_port_pin((void*)ioport_pin_to_port(IOPORT_CREATE_PIN(currConfig.config.LEDs,currConfig.config.emergSwPin)),
	                          (pin_mask_t)(1<<currConfig.config.emergSwPin),IOPORT_DIR_INPUT|IOPORT_PULL_UP);
 3f2:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <__data_end+0x3>
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	08 2e       	mov	r0, r24
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <MotorDriverInit+0xcc>
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 406:	ee 0f       	add	r30, r30
 408:	ee 0f       	add	r30, r30
 40a:	ee 0f       	add	r30, r30
 40c:	8e 0f       	add	r24, r30
 40e:	e8 2f       	mov	r30, r24
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	f6 95       	lsr	r31
 414:	e7 95       	ror	r30
 416:	f6 95       	lsr	r31
 418:	e7 95       	ror	r30
 41a:	f6 95       	lsr	r31
 41c:	e7 95       	ror	r30
 41e:	cf 01       	movw	r24, r30
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	e8 0f       	add	r30, r24
 426:	f9 1f       	adc	r31, r25
 428:	b0 96       	adiw	r30, 0x20	; 32
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 42a:	82 2f       	mov	r24, r18
 42c:	80 95       	com	r24
 42e:	91 81       	ldd	r25, Z+1	; 0x01
 430:	89 23       	and	r24, r25
 432:	81 83       	std	Z+1, r24	; 0x01
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 434:	82 81       	ldd	r24, Z+2	; 0x02
 436:	28 2b       	or	r18, r24
 438:	22 83       	std	Z+2, r18	; 0x02
	
	//configure timer
	tc_timer_init();
 43a:	b8 d0       	rcall	.+368    	; 0x5ac <tc_timer_init>
	
	cpu_irq_enable(); //enable global interrupts
 43c:	78 94       	sei
	if (emStatus != NOEMERG) //emergency bit changed
 43e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <emStatus>
 442:	8f 3f       	cpi	r24, 0xFF	; 255
 444:	41 f0       	breq	.+16     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
	   currConfig.config.callback(emStatus=NOEMERG); // call callback
 446:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_end+0x4>
 44a:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_end+0x5>
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <emStatus>
 454:	19 95       	eicall
	}					   
	err=READY;
 456:	89 e0       	ldi	r24, 0x09	; 9
 458:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <err>
	StopMotor();
 45c:	56 cf       	rjmp	.-340    	; 0x30a <StopMotor>
 45e:	08 95       	ret

00000460 <GetStatus>:
	}
 }

DriverStatus GetStatus()
{
   return err | curDir | curSpeed;   
 460:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <err>
 464:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <curDir>
 468:	89 2b       	or	r24, r25
 46a:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_start>
}
 46e:	89 2b       	or	r24, r25
 470:	08 95       	ret

00000472 <GetEmStatus>:


const int8_t GetEmStatus()
{
   return emStatus;
}
 472:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <emStatus>
 476:	08 95       	ret

00000478 <__vector_9>:
 // emergency switch isr
 ISR(INTERRUPTVECT,ISR_BLOCK)
 {
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	0b b6       	in	r0, 0x3b	; 59
 484:	0f 92       	push	r0
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	7f 93       	push	r23
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
   if (!ioport_get_pin_level(IOPORT_CREATE_PIN(EMERGSWPORT,currConfig.config.emergSwPin)) && err == READY)
 49e:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <__data_end+0x3>
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	28 5f       	subi	r18, 0xF8	; 248
 4a6:	3f 4f       	sbci	r19, 0xFF	; 255
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
 4a8:	c9 01       	movw	r24, r18
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	96 95       	lsr	r25
 4b0:	87 95       	ror	r24
 4b2:	96 95       	lsr	r25
 4b4:	87 95       	ror	r24
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
#ifdef IOPORT_BASE_ADDRESS_H	
	if (port >= IOPORT_PORTH) {
 4b6:	8a 34       	cpi	r24, 0x4A	; 74
 4b8:	58 f0       	brcs	.+22     	; 0x4d0 <__vector_9+0x58>
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
 4ba:	99 27       	eor	r25, r25
 4bc:	8a 54       	subi	r24, 0x4A	; 74
 4be:	91 09       	sbc	r25, r1
 4c0:	fc 01       	movw	r30, r24
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	8e 0f       	add	r24, r30
 4c8:	9f 1f       	adc	r25, r31
 4ca:	fc 01       	movw	r30, r24
 4cc:	f3 95       	inc	r31
 4ce:	08 c0       	rjmp	.+16     	; 0x4e0 <__vector_9+0x68>
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 4d0:	99 27       	eor	r25, r25
 4d2:	fc 01       	movw	r30, r24
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	8e 0f       	add	r24, r30
 4da:	9f 1f       	adc	r25, r31
 4dc:	fc 01       	movw	r30, r24
 4de:	b0 96       	adiw	r30, 0x20	; 32
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 4e0:	40 81       	ld	r20, Z
 4e2:	27 70       	andi	r18, 0x07	; 7
 4e4:	33 27       	eor	r19, r19
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__vector_9+0x78>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	2a 95       	dec	r18
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__vector_9+0x74>
 4f4:	84 23       	and	r24, r20
 4f6:	71 f4       	brne	.+28     	; 0x514 <__vector_9+0x9c>
 4f8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <err>
 4fc:	89 30       	cpi	r24, 0x09	; 9
 4fe:	51 f4       	brne	.+20     	; 0x514 <__vector_9+0x9c>
   { // switch closed
      emStatus=-emStatus;
 500:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <emStatus>
 504:	81 95       	neg	r24
 506:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <emStatus>
      currConfig.config.callback(emStatus);
 50a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_end+0x4>
 50e:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_end+0x5>
 512:	19 95       	eicall
   } 
 }
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0b be       	out	0x3b, r0	; 59
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <__vector_default>:
 
 ISR(BADISR_vect) // don't let cpu reset
 {
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 }
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0
 54a:	1f 90       	pop	r1
 54c:	18 95       	reti

0000054e <__vector_13>:
# define TC_TIMEOUT_COMP_vect TIMER2_COMPA_vect
#endif

//! \brief Interrupt handler for TC compare
ISR(TC_TIMEOUT_COMP_vect)
{
 54e:	1f 92       	push	r1
 550:	0f 92       	push	r0
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	0f 92       	push	r0
 556:	11 24       	eor	r1, r1
 558:	0b b6       	in	r0, 0x3b	; 59
 55a:	0f 92       	push	r0
 55c:	2f 93       	push	r18
 55e:	3f 93       	push	r19
 560:	4f 93       	push	r20
 562:	5f 93       	push	r21
 564:	6f 93       	push	r22
 566:	7f 93       	push	r23
 568:	8f 93       	push	r24
 56a:	9f 93       	push	r25
 56c:	af 93       	push	r26
 56e:	bf 93       	push	r27
 570:	ef 93       	push	r30
 572:	ff 93       	push	r31
   if (tc_timer_started)
 574:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <tc_timer_started>
 578:	88 23       	and	r24, r24
 57a:	29 f0       	breq	.+10     	; 0x586 <__vector_13+0x38>
   {
	  timer_callback();
 57c:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <timer_callback>
 580:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <timer_callback+0x1>
 584:	19 95       	eicall
   }
}
 586:	ff 91       	pop	r31
 588:	ef 91       	pop	r30
 58a:	bf 91       	pop	r27
 58c:	af 91       	pop	r26
 58e:	9f 91       	pop	r25
 590:	8f 91       	pop	r24
 592:	7f 91       	pop	r23
 594:	6f 91       	pop	r22
 596:	5f 91       	pop	r21
 598:	4f 91       	pop	r20
 59a:	3f 91       	pop	r19
 59c:	2f 91       	pop	r18
 59e:	0f 90       	pop	r0
 5a0:	0b be       	out	0x3b, r0	; 59
 5a2:	0f 90       	pop	r0
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	0f 90       	pop	r0
 5a8:	1f 90       	pop	r1
 5aa:	18 95       	reti

000005ac <tc_timer_init>:

/** @} */

void tc_timer_init()
{
    if (!tc_timer_inited && !tc_timer_setted && !tc_timer_started)
 5ac:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <tc_timer_inited>
 5b0:	81 11       	cpse	r24, r1
 5b2:	15 c0       	rjmp	.+42     	; 0x5de <tc_timer_init+0x32>
 5b4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <tc_timer_setted>
 5b8:	81 11       	cpse	r24, r1
 5ba:	11 c0       	rjmp	.+34     	; 0x5de <tc_timer_init+0x32>
 5bc:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <tc_timer_started>
 5c0:	81 11       	cpse	r24, r1
 5c2:	0d c0       	rjmp	.+26     	; 0x5de <tc_timer_init+0x32>
	{

	// Set up clock source according to configuration
	ASSR = TC_TIMEOUT_ASSR_MASK;
 5c4:	80 e2       	ldi	r24, 0x20	; 32
 5c6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7000b6>

	// Configure Timer/Counter to CTC mode, and set desired prescaler
#ifdef TC_TIMEOUT_TCCRB // Only newer mega devices have two control register
	TC_TIMEOUT_TCCRA = 1 << WGM21;
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TC_TIMEOUT_TCCRB = TIMER_STOP;
 5d0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
#else
	TC_TIMEOUT_TCCRA = (1 << WGM21) | TIMER_STOP;
#endif
    
	// Enable interrupt for compare match
	TC_TIMEOUT_TIMSK = 1 << TC_TIMEOUT_OCIE;
 5d4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>

	tc_timer_inited=true;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <tc_timer_inited>
 5de:	08 95       	ret

000005e0 <tc_timer_set>:



void tc_timer_set(uint32_t val,void (*callback)(void))
{
   if (tc_timer_inited && !tc_timer_started)
 5e0:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <tc_timer_inited>
 5e4:	22 23       	and	r18, r18
 5e6:	09 f4       	brne	.+2      	; 0x5ea <tc_timer_set+0xa>
 5e8:	64 c0       	rjmp	.+200    	; 0x6b2 <tc_timer_set+0xd2>
 5ea:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <tc_timer_started>
 5ee:	21 11       	cpse	r18, r1
 5f0:	60 c0       	rjmp	.+192    	; 0x6b2 <tc_timer_set+0xd2>
   {
    timer_callback=callback;  
 5f2:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <timer_callback+0x1>
 5f6:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <timer_callback>
   uint16_t tc_timer_prescaler=1;

   if (val > 0xFF*2<<7)
 5fa:	61 30       	cpi	r22, 0x01	; 1
 5fc:	2f ef       	ldi	r18, 0xFF	; 255
 5fe:	72 07       	cpc	r23, r18
 600:	82 07       	cpc	r24, r18
 602:	92 07       	cpc	r25, r18
 604:	40 f0       	brcs	.+16     	; 0x616 <tc_timer_set+0x36>
   {
      tc_timer_prescale_mask|=(1<<CS21)|(1<<CS22);
 606:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <tc_timer_prescale_mask>
 60a:	26 60       	ori	r18, 0x06	; 6
 60c:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	  tc_timer_prescaler=1024;
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	34 e0       	ldi	r19, 0x04	; 4
 614:	42 c0       	rjmp	.+132    	; 0x69a <tc_timer_set+0xba>
   }
   else if (val > 0xFF*2<<6)
 616:	61 38       	cpi	r22, 0x81	; 129
 618:	2f e7       	ldi	r18, 0x7F	; 127
 61a:	72 07       	cpc	r23, r18
 61c:	81 05       	cpc	r24, r1
 61e:	91 05       	cpc	r25, r1
 620:	30 f0       	brcs	.+12     	; 0x62e <tc_timer_set+0x4e>
   {
      tc_timer_prescale_mask=(1 << CS22) | (1 << CS21);
 622:	26 e0       	ldi	r18, 0x06	; 6
 624:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	  tc_timer_prescaler=256;
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	31 e0       	ldi	r19, 0x01	; 1
 62c:	36 c0       	rjmp	.+108    	; 0x69a <tc_timer_set+0xba>
   }
   else if (val > 0xFF*2<<5)
 62e:	61 3c       	cpi	r22, 0xC1	; 193
 630:	2f e3       	ldi	r18, 0x3F	; 63
 632:	72 07       	cpc	r23, r18
 634:	81 05       	cpc	r24, r1
 636:	91 05       	cpc	r25, r1
 638:	40 f0       	brcs	.+16     	; 0x64a <tc_timer_set+0x6a>
   {
       tc_timer_prescale_mask|=(1<<CS22);
 63a:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <tc_timer_prescale_mask>
 63e:	24 60       	ori	r18, 0x04	; 4
 640:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	   tc_timer_prescaler=128;
 644:	20 e8       	ldi	r18, 0x80	; 128
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	28 c0       	rjmp	.+80     	; 0x69a <tc_timer_set+0xba>
   }
   else if (val > 0xFF*2<<4)
 64a:	61 3e       	cpi	r22, 0xE1	; 225
 64c:	2f e1       	ldi	r18, 0x1F	; 31
 64e:	72 07       	cpc	r23, r18
 650:	81 05       	cpc	r24, r1
 652:	91 05       	cpc	r25, r1
 654:	30 f0       	brcs	.+12     	; 0x662 <tc_timer_set+0x82>
   {
       tc_timer_prescale_mask=(1<<CS22);
 656:	24 e0       	ldi	r18, 0x04	; 4
 658:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	   tc_timer_prescaler=64;
 65c:	20 e4       	ldi	r18, 0x40	; 64
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	1c c0       	rjmp	.+56     	; 0x69a <tc_timer_set+0xba>
   }
   else if (val > 0xFF*2<<2)
 662:	69 3f       	cpi	r22, 0xF9	; 249
 664:	27 e0       	ldi	r18, 0x07	; 7
 666:	72 07       	cpc	r23, r18
 668:	81 05       	cpc	r24, r1
 66a:	91 05       	cpc	r25, r1
 66c:	40 f0       	brcs	.+16     	; 0x67e <tc_timer_set+0x9e>
   {
       tc_timer_prescale_mask|=(1<<CS21);
 66e:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <tc_timer_prescale_mask>
 672:	22 60       	ori	r18, 0x02	; 2
 674:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	   tc_timer_prescaler=32;
 678:	20 e2       	ldi	r18, 0x20	; 32
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	0e c0       	rjmp	.+28     	; 0x69a <tc_timer_set+0xba>
   }
   else if (val > 0xFF)
 67e:	6f 3f       	cpi	r22, 0xFF	; 255
 680:	71 05       	cpc	r23, r1
 682:	81 05       	cpc	r24, r1
 684:	91 05       	cpc	r25, r1
 686:	39 f0       	breq	.+14     	; 0x696 <tc_timer_set+0xb6>
 688:	30 f0       	brcs	.+12     	; 0x696 <tc_timer_set+0xb6>
   {
       tc_timer_prescale_mask=(1<<CS21);
 68a:	22 e0       	ldi	r18, 0x02	; 2
 68c:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	   tc_timer_prescaler=8;
 690:	28 e0       	ldi	r18, 0x08	; 8
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <tc_timer_set+0xba>
void tc_timer_set(uint32_t val,void (*callback)(void))
{
   if (tc_timer_inited && !tc_timer_started)
   {
    timer_callback=callback;  
   uint16_t tc_timer_prescaler=1;
 696:	21 e0       	ldi	r18, 0x01	; 1
 698:	30 e0       	ldi	r19, 0x00	; 0
   else if (val > 0xFF)
   {
       tc_timer_prescale_mask=(1<<CS21);
	   tc_timer_prescaler=8;
   }
   TC_TIMEOUT_OCR=val/tc_timer_prescaler - 1;
 69a:	40 e0       	ldi	r20, 0x00	; 0
 69c:	50 e0       	ldi	r21, 0x00	; 0
 69e:	7e d1       	rcall	.+764    	; 0x99c <__udivmodsi4>
 6a0:	21 50       	subi	r18, 0x01	; 1
 6a2:	e3 eb       	ldi	r30, 0xB3	; 179
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	20 83       	st	Z, r18
   if (TC_TIMEOUT_OCR < 0)
 6a8:	80 81       	ld	r24, Z
      TC_TIMEOUT_OCR=0;
   else if (TC_TIMEOUT_OCR > 0xFF)
 6aa:	80 81       	ld	r24, Z
      TC_TIMEOUT_OCR=255;
   tc_timer_setted=true;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <tc_timer_setted>
 6b2:	08 95       	ret

000006b4 <tc_timer_start>:
   }
}
void tc_timer_start()
{
   if (tc_timer_setted)
 6b4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <tc_timer_setted>
 6b8:	88 23       	and	r24, r24
 6ba:	39 f0       	breq	.+14     	; 0x6ca <tc_timer_start+0x16>
   {

   #ifdef TC_TIMEOUT_TCCRB // Only newer mega devices have two control register
   TC_TIMEOUT_TCCRB = tc_timer_prescale_mask;
 6bc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <tc_timer_prescale_mask>
 6c0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   #else
   TC_TIMEOUT_TCCRA |= (1 << WGM21) | tc_timer_prescale_mask;
   #endif
   tc_timer_started=true;
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <tc_timer_started>
 6ca:	08 95       	ret

000006cc <tc_timer_stop>:
   }
}
void tc_timer_stop()
{
    if (tc_timer_started)
 6cc:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <tc_timer_started>
 6d0:	81 11       	cpse	r24, r1
	{
	    #ifdef TC_TIMEOUT_TCCRB // Only newer mega devices have two control register
	    TC_TIMEOUT_TCCRB = 0;
 6d2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
 6d6:	08 95       	ret

000006d8 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 6d8:	08 95       	ret

000006da <emergIndicator>:
   ioport_configure_port_pin((void*)ioport_pin_to_port(EMLEDPIN),(pin_mask_t)(1<<EMLEDPIN),
                             IOPORT_DIR_OUTPUT);
}
void emergIndicator(int8_t status)
{
   if (status == EMERGENCY)
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	11 f4       	brne	.+4      	; 0x6e2 <emergIndicator+0x8>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 6de:	5c 9a       	sbi	0x0b, 4	; 11
 6e0:	08 95       	ret
   {
      ioport_set_pin_high(IOPORT_CREATE_PIN(EMLEDPORT,EMLEDPIN));
   }
   else if (status == NOEMERG)
 6e2:	8f 3f       	cpi	r24, 0xFF	; 255
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <emergIndicator+0xe>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 6e6:	5c 98       	cbi	0x0b, 4	; 11
 6e8:	08 95       	ret

000006ea <main>:
#include "main.h"
#define CurConfig LEDConfigA

int main (void)
{
	board_init();
 6ea:	f6 df       	rcall	.-20     	; 0x6d8 <board_init>
	sysclk_init();
 6ec:	91 dd       	rcall	.-1246   	; 0x210 <sysclk_init>
 6ee:	f8 94       	cli
   cpu_irq_enable(); 
}

static void switch_init()
{
   cpu_irq_disable();
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
   // set interrupt on rising edge
   EICRA=(1<<ISC31)|(1<<ISC30)|(1<<ISC21)|(1<<ISC20)|(1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00);
 6f2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
 6f6:	8f e0       	ldi	r24, 0x0F	; 15
   // turn on interrupts on change of pins 0-3
   EIMSK=(1<<INT3)|(1<<INT2)|(1<<INT1)|(1<<INT0);
 6f8:	8d bb       	out	0x1d, r24	; 29
 6fa:	82 e0       	ldi	r24, 0x02	; 2
   // turn on pin change interrupt for PCINT1
   PCICR=(1<<PCIE1);
 6fc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
 700:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x70006c>
   PCMSK1=(1<<PCINT9);
 704:	91 b1       	in	r25, 0x01	; 1
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 706:	90 7f       	andi	r25, 0xF0	; 240
 708:	91 b9       	out	0x01, r25	; 1
 70a:	92 b1       	in	r25, 0x02	; 2
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 70c:	9f 60       	ori	r25, 0x0F	; 15
 70e:	92 b9       	out	0x02, r25	; 2
 710:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
   ioport_configure_group(ioport_pin_to_port_id(SWPIN(D,0)),SWPINDMASK,IOPORT_PULL_UP|IOPORT_DIR_INPUT);
   ioport_configure_group(ioport_pin_to_port_id(SWPIN(J,0)),SWPINJMASK,IOPORT_PULL_UP|IOPORT_DIR_INPUT);
   btnTimeout=swPressed=false;
 714:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 718:	78 94       	sei
   cpu_irq_enable();
 71a:	f8 94       	cli
	}
}

static void timer_dbnc_init()
{
   cpu_irq_disable();
 71c:	98 e0       	ldi	r25, 0x08	; 8
   TCCR1B=(1<<WGM12); // normal operation
 71e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
 722:	23 e5       	ldi	r18, 0x53	; 83
   OCR1A=TMR_TICKS(sysclk_get_cpu_hz(),DBNC_DLY_TIME,8);
 724:	37 e0       	ldi	r19, 0x07	; 7
 726:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 72a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 72e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
   TIMSK1=(1<<OCIE1A); // enable timer1 interrupt
 732:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
   swPressed=btnTimeout=false;
 736:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
 73a:	78 94       	sei
   cpu_irq_enable(); 
 73c:	14 98       	cbi	0x02, 4	; 2
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 73e:	0c 9a       	sbi	0x01, 4	; 1
		}

		*((uint8_t *)port + 1) |= pin_mask;
 740:	6d e6       	ldi	r22, 0x6D	; 109
	sysclk_init();
	ioport_init();
	switch_init();
	timer_dbnc_init();
	emerg_led_init();
	Status status=DrvrInit(CurConfig,&emergIndicator);
 742:	73 e0       	ldi	r23, 0x03	; 3
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	24 dd       	rcall	.-1464   	; 0x190 <DrvrInit>
 748:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <swPressed>
	while (true)
	{
	   if (swPressed && btnTimeout && status!=ERR)
 74c:	99 23       	and	r25, r25
 74e:	e1 f3       	breq	.-8      	; 0x748 <main+0x5e>
 750:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <btnTimeout>
 754:	99 23       	and	r25, r25
 756:	c1 f3       	breq	.-16     	; 0x748 <main+0x5e>
 758:	86 30       	cpi	r24, 0x06	; 6
 75a:	b1 f3       	breq	.-20     	; 0x748 <main+0x5e>
 75c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <curSwNum>
	   {
	      switch(curSwNum)
 760:	93 30       	cpi	r25, 0x03	; 3
 762:	c1 f0       	breq	.+48     	; 0x794 <main+0xaa>
 764:	28 f4       	brcc	.+10     	; 0x770 <main+0x86>
 766:	91 30       	cpi	r25, 0x01	; 1
 768:	41 f0       	breq	.+16     	; 0x77a <main+0x90>
 76a:	92 30       	cpi	r25, 0x02	; 2
 76c:	61 f0       	breq	.+24     	; 0x786 <main+0x9c>
 76e:	ec cf       	rjmp	.-40     	; 0x748 <main+0x5e>
 770:	94 30       	cpi	r25, 0x04	; 4
 772:	b9 f0       	breq	.+46     	; 0x7a2 <main+0xb8>
 774:	95 30       	cpi	r25, 0x05	; 5
 776:	e1 f0       	breq	.+56     	; 0x7b0 <main+0xc6>
 778:	e7 cf       	rjmp	.-50     	; 0x748 <main+0x5e>
		  {
		     case 1: status=MotorStop(); curSwNum=0; swPressed=false; break;
 77a:	22 dd       	rcall	.-1468   	; 0x1c0 <MotorStop>
 77c:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <curSwNum>
 780:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
 784:	e1 cf       	rjmp	.-62     	; 0x748 <main+0x5e>
			 case 2: status=MotorForward(SLOW); curSwNum=0; swPressed=false; break;
 786:	84 e0       	ldi	r24, 0x04	; 4
 788:	21 dd       	rcall	.-1470   	; 0x1cc <MotorForward>
 78a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <curSwNum>
 78e:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
 792:	da cf       	rjmp	.-76     	; 0x748 <main+0x5e>
			 case 3: status=MotorForward(FAST); curSwNum=0; swPressed=false; break;
 794:	83 e0       	ldi	r24, 0x03	; 3
 796:	1a dd       	rcall	.-1484   	; 0x1cc <MotorForward>
 798:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <curSwNum>
 79c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
 7a0:	d3 cf       	rjmp	.-90     	; 0x748 <main+0x5e>
			 case 4: status=MotorReverse(SLOW); curSwNum=0; swPressed=false; break;
 7a2:	84 e0       	ldi	r24, 0x04	; 4
 7a4:	24 dd       	rcall	.-1464   	; 0x1ee <MotorReverse>
 7a6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <curSwNum>
 7aa:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
 7ae:	cc cf       	rjmp	.-104    	; 0x748 <main+0x5e>
			 case 5: status=MotorReverse(FAST); curSwNum=0; swPressed=false; break;  
 7b0:	83 e0       	ldi	r24, 0x03	; 3
 7b2:	1d dd       	rcall	.-1478   	; 0x1ee <MotorReverse>
 7b4:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <curSwNum>
 7b8:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
 7bc:	c5 cf       	rjmp	.-118    	; 0x748 <main+0x5e>

000007be <__vector_17>:
 7be:	1f 92       	push	r1
   {
      ioport_set_pin_low(IOPORT_CREATE_PIN(EMLEDPORT,EMLEDPIN));
   }
}
ISR (TIMER1_COMPA_vect,ISR_BLOCK)
{
 7c0:	0f 92       	push	r0
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	0f 92       	push	r0
 7c6:	11 24       	eor	r1, r1
 7c8:	0b b6       	in	r0, 0x3b	; 59
 7ca:	0f 92       	push	r0
 7cc:	8f 93       	push	r24
 7ce:	ef 93       	push	r30
 7d0:	ff 93       	push	r31
   DEBOUNCE();
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <btnTimeout>
   DISABLE_DBNC_TMR();
 7d8:	e1 e8       	ldi	r30, 0x81	; 129
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	88 7f       	andi	r24, 0xF8	; 248
 7e0:	80 83       	st	Z, r24
}
 7e2:	ff 91       	pop	r31
 7e4:	ef 91       	pop	r30
 7e6:	8f 91       	pop	r24
 7e8:	0f 90       	pop	r0
 7ea:	0b be       	out	0x3b, r0	; 59
 7ec:	0f 90       	pop	r0
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	0f 90       	pop	r0
 7f2:	1f 90       	pop	r1
 7f4:	18 95       	reti

000007f6 <__vector_1>:
ISR (INT0_vect, ISR_BLOCK)
{
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	0b b6       	in	r0, 0x3b	; 59
 802:	0f 92       	push	r0
 804:	8f 93       	push	r24
 806:	ef 93       	push	r30
 808:	ff 93       	push	r31
   curSwNum=1;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
   ENABLE_DBNC_TMR();
 810:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <swPressed>
 814:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 818:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 81c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 820:	e1 e8       	ldi	r30, 0x81	; 129
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	82 e0       	ldi	r24, 0x02	; 2
 828:	80 83       	st	Z, r24
}
 82a:	ff 91       	pop	r31
 82c:	ef 91       	pop	r30
 82e:	8f 91       	pop	r24
 830:	0f 90       	pop	r0
 832:	0b be       	out	0x3b, r0	; 59
 834:	0f 90       	pop	r0
 836:	0f be       	out	0x3f, r0	; 63
 838:	0f 90       	pop	r0
 83a:	1f 90       	pop	r1
 83c:	18 95       	reti

0000083e <__vector_2>:
ISR (INT1_vect, ISR_BLOCK)
{
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	0f 92       	push	r0
 846:	11 24       	eor	r1, r1
 848:	0b b6       	in	r0, 0x3b	; 59
 84a:	0f 92       	push	r0
 84c:	8f 93       	push	r24
 84e:	9f 93       	push	r25
 850:	ef 93       	push	r30
 852:	ff 93       	push	r31
   curSwNum=2;
 854:	82 e0       	ldi	r24, 0x02	; 2
 856:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
   ENABLE_DBNC_TMR();
 85a:	91 e0       	ldi	r25, 0x01	; 1
 85c:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <swPressed>
 860:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 864:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 868:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 86c:	e1 e8       	ldi	r30, 0x81	; 129
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	90 81       	ld	r25, Z
 872:	80 83       	st	Z, r24
}
 874:	ff 91       	pop	r31
 876:	ef 91       	pop	r30
 878:	9f 91       	pop	r25
 87a:	8f 91       	pop	r24
 87c:	0f 90       	pop	r0
 87e:	0b be       	out	0x3b, r0	; 59
 880:	0f 90       	pop	r0
 882:	0f be       	out	0x3f, r0	; 63
 884:	0f 90       	pop	r0
 886:	1f 90       	pop	r1
 888:	18 95       	reti

0000088a <__vector_3>:
ISR (INT2_vect,ISR_BLOCK)
{
 88a:	1f 92       	push	r1
 88c:	0f 92       	push	r0
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	0f 92       	push	r0
 892:	11 24       	eor	r1, r1
 894:	0b b6       	in	r0, 0x3b	; 59
 896:	0f 92       	push	r0
 898:	8f 93       	push	r24
 89a:	ef 93       	push	r30
 89c:	ff 93       	push	r31
   curSwNum=3;
 89e:	83 e0       	ldi	r24, 0x03	; 3
 8a0:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
   ENABLE_DBNC_TMR();
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <swPressed>
 8aa:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 8ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 8b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 8b6:	e1 e8       	ldi	r30, 0x81	; 129
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	82 e0       	ldi	r24, 0x02	; 2
 8be:	80 83       	st	Z, r24
}
 8c0:	ff 91       	pop	r31
 8c2:	ef 91       	pop	r30
 8c4:	8f 91       	pop	r24
 8c6:	0f 90       	pop	r0
 8c8:	0b be       	out	0x3b, r0	; 59
 8ca:	0f 90       	pop	r0
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	0f 90       	pop	r0
 8d0:	1f 90       	pop	r1
 8d2:	18 95       	reti

000008d4 <__vector_4>:
ISR (INT3_vect,ISR_BLOCK)
{
 8d4:	1f 92       	push	r1
 8d6:	0f 92       	push	r0
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	0f 92       	push	r0
 8dc:	11 24       	eor	r1, r1
 8de:	0b b6       	in	r0, 0x3b	; 59
 8e0:	0f 92       	push	r0
 8e2:	8f 93       	push	r24
 8e4:	ef 93       	push	r30
 8e6:	ff 93       	push	r31
	curSwNum=4;
 8e8:	84 e0       	ldi	r24, 0x04	; 4
 8ea:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
	ENABLE_DBNC_TMR();
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <swPressed>
 8f4:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 8f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 8fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 900:	e1 e8       	ldi	r30, 0x81	; 129
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	82 e0       	ldi	r24, 0x02	; 2
 908:	80 83       	st	Z, r24
}
 90a:	ff 91       	pop	r31
 90c:	ef 91       	pop	r30
 90e:	8f 91       	pop	r24
 910:	0f 90       	pop	r0
 912:	0b be       	out	0x3b, r0	; 59
 914:	0f 90       	pop	r0
 916:	0f be       	out	0x3f, r0	; 63
 918:	0f 90       	pop	r0
 91a:	1f 90       	pop	r1
 91c:	18 95       	reti

0000091e <__vector_10>:

ISR (PCINT1_vect,ISR_BLOCK)
{
 91e:	1f 92       	push	r1
 920:	0f 92       	push	r0
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	0f 92       	push	r0
 926:	11 24       	eor	r1, r1
 928:	0b b6       	in	r0, 0x3b	; 59
 92a:	0f 92       	push	r0
 92c:	8f 93       	push	r24
 92e:	ef 93       	push	r30
 930:	ff 93       	push	r31
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 932:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    if (!ioport_get_pin_level(IOPORT_CREATE_PIN(SW5PORT,SWPIN(J,0))))
 936:	80 fd       	sbrc	r24, 0
 938:	12 c0       	rjmp	.+36     	; 0x95e <__vector_10+0x40>
	{
	   curSwNum=5;
 93a:	85 e0       	ldi	r24, 0x05	; 5
 93c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
	   //if switch pressed, enable debounce timer
	   ENABLE_DBNC_TMR();
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <swPressed>
 946:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 94a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 94e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 952:	e1 e8       	ldi	r30, 0x81	; 129
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	80 81       	ld	r24, Z
 958:	82 e0       	ldi	r24, 0x02	; 2
 95a:	80 83       	st	Z, r24
 95c:	15 c0       	rjmp	.+42     	; 0x988 <__vector_10+0x6a>
 95e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	}
	else if (!ioport_get_pin_level(IOPORT_CREATE_PIN(SW5PORT,SWPIN(J,0))))
 962:	80 fd       	sbrc	r24, 0
 964:	11 c0       	rjmp	.+34     	; 0x988 <__vector_10+0x6a>
	{
	   curSwNum=6;
 966:	86 e0       	ldi	r24, 0x06	; 6
 968:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
	   ENABLE_DBNC_TMR();
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <swPressed>
 972:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 976:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 97a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 97e:	e1 e8       	ldi	r30, 0x81	; 129
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	82 e0       	ldi	r24, 0x02	; 2
 986:	80 83       	st	Z, r24
	}
 988:	ff 91       	pop	r31
 98a:	ef 91       	pop	r30
 98c:	8f 91       	pop	r24
 98e:	0f 90       	pop	r0
 990:	0b be       	out	0x3b, r0	; 59
 992:	0f 90       	pop	r0
 994:	0f be       	out	0x3f, r0	; 63
 996:	0f 90       	pop	r0
 998:	1f 90       	pop	r1
 99a:	18 95       	reti

0000099c <__udivmodsi4>:
 99c:	a1 e2       	ldi	r26, 0x21	; 33
 99e:	1a 2e       	mov	r1, r26
 9a0:	aa 1b       	sub	r26, r26
 9a2:	bb 1b       	sub	r27, r27
 9a4:	fd 01       	movw	r30, r26
 9a6:	0d c0       	rjmp	.+26     	; 0x9c2 <__udivmodsi4_ep>

000009a8 <__udivmodsi4_loop>:
 9a8:	aa 1f       	adc	r26, r26
 9aa:	bb 1f       	adc	r27, r27
 9ac:	ee 1f       	adc	r30, r30
 9ae:	ff 1f       	adc	r31, r31
 9b0:	a2 17       	cp	r26, r18
 9b2:	b3 07       	cpc	r27, r19
 9b4:	e4 07       	cpc	r30, r20
 9b6:	f5 07       	cpc	r31, r21
 9b8:	20 f0       	brcs	.+8      	; 0x9c2 <__udivmodsi4_ep>
 9ba:	a2 1b       	sub	r26, r18
 9bc:	b3 0b       	sbc	r27, r19
 9be:	e4 0b       	sbc	r30, r20
 9c0:	f5 0b       	sbc	r31, r21

000009c2 <__udivmodsi4_ep>:
 9c2:	66 1f       	adc	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	1a 94       	dec	r1
 9cc:	69 f7       	brne	.-38     	; 0x9a8 <__udivmodsi4_loop>
 9ce:	60 95       	com	r22
 9d0:	70 95       	com	r23
 9d2:	80 95       	com	r24
 9d4:	90 95       	com	r25
 9d6:	9b 01       	movw	r18, r22
 9d8:	ac 01       	movw	r20, r24
 9da:	bd 01       	movw	r22, r26
 9dc:	cf 01       	movw	r24, r30
 9de:	08 95       	ret

000009e0 <_exit>:
 9e0:	f8 94       	cli

000009e2 <__stop_program>:
 9e2:	ff cf       	rjmp	.-2      	; 0x9e2 <__stop_program>
